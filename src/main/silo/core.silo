
package(silo.core)

alias(RT, com.github.krukow.clj_lang.RT)
alias(Node, silo.lang.Node)
alias(Symbol, silo.lang.Symbol)

function(
    name(while)
    macro
    inputs(condition, body)
    outputs(silo.lang.Node)
    {
        b : java.util.Vector = java.util.Vector()
        b#add(condition)
        b#add(body)
        b#add(silo.lang.Node(silo.lang.Symbol("break")))

        l : java.util.Vector = java.util.Vector()
        l#add(silo.lang.Node(silo.lang.Symbol("branch"), b))

        silo.lang.Node(silo.lang.Symbol("loop"), l)
    }
)

function(
    name(if)
    macro
    varargs(args)
    outputs(silo.lang.Node)
    {
        // I cannot use "vector()" here because the if-macro is called by the func-macro and the
        // vector function is not compiled yet at that point.
        vec : Vector = com.github.krukow.clj_lang.PersistentVector.emptyVector()

        i : int = 0
        while(i < args#length() {
            o : Object = args#nth(i)

            branch(i % 2 == 0 {
                branch(i == 0 {
                    vec = vec#cons(o)
                } {
                    branch(instanceof(o, silo.lang.Node) {
                        n : silo.lang.Node = null
                        n = checkcast(o, silo.lang.Node)

                        vec = vec#cons(silo.lang.Node(
                            silo.lang.Symbol("do")
                            n#getChildren()
                        ))
                    } {
                        vec = vec#cons(Boolean.TRUE)
                    })
                })
            } {
                vec = vec#cons(o)
            })

            i = i + 1
        })

        expression : silo.lang.Node = null

        i : int = vec#length() - 1
        while(i >= 0 {
            condition : Object = vec#nth(i - 1)
            body : Object = vec#nth(i)

            expression = silo.lang.Node(
                silo.lang.Symbol("branch")
                condition
                body
                expression
            )

            i = i - 2;
        })

        return(expression)
    }
)

function(
    name(symbol)
    inputs(s : String)
    outputs(silo.lang.Symbol)
    {
        silo.lang.Symbol(s);
    }
)

function(
    name(vectorNew)
    varargs(args)
    outputs(Vector)
    {
        args
    }
)

function(
    name(node)
    varargs(args)
    outputs(silo.lang.Node)
    {
        silo.lang.Node.fromVector(args)
    }
)

function(
    name(func)
    macro
    inputs(id_ : Object, body_ : Object)
    outputs(silo.lang.Node)
    {
        id : silo.lang.Node = null

        if(instanceof(id_, silo.lang.Node) {
            id = checkcast(id_, silo.lang.Node)
        } else(instanceof(id_, silo.lang.Symbol)) {
            id = silo.lang.Node(id_)
        } else {
            // TODO: Support and then throw an exception. I probably
            // should have a "report-error" macro or special form that
            // allows me to report the line number and position of an
            // error
        })

        body : silo.lang.Node = node(
            symbol("do")
            body_
        )

        children : java.util.Vector = id#getChildren();

        inputs : Vector = vectorNew(symbol("inputs"))
        outputs : Vector = vectorNew(symbol("outputs"))
        varargs : Vector = vectorNew(symbol("varargs"))

        useInputs : boolean = true
        isVarArgs : boolean = false

        n : silo.lang.Node = null
        s : silo.lang.Symbol = null

        i : int = 0
        while(i < children#size() {
            o : Object = children#get(i)

            isArrow : boolean = false
            isDots : boolean = false

            branch(instanceof(o, silo.lang.Node) {
                n = checkcast(o, silo.lang.Node)
                isArrow = invokevirtual(invokevirtual(n getLabel()) equals(symbol("=>")))
            })

            branch(instanceof(o, silo.lang.Symbol) {
                s = checkcast(o, silo.lang.Symbol)
                isDots = s#equals(symbol("..."))
                isArrow = s#equals(symbol("=>"))
            })

            branch(isArrow {
                useInputs = false

                branch(instanceof(o, silo.lang.Node) {
                    n = checkcast(o, silo.lang.Node)

                    branch(instanceof(n#getFirstChild(), silo.lang.Symbol) {
                        s = checkcast(n#getFirstChild(), silo.lang.Symbol)
                        branch(s#equals(symbol("...")) {
                            isVarArgs = true
                        } {
                            inputs = inputs#cons(n#getFirstChild())
                        })
                    } {
                        branch(n#getFirstChild() {
                            inputs = inputs#cons(n#getFirstChild())
                        })
                    })

                    outputs = outputs#cons(n#getSecondChild())
                })
            } {
                branch(isDots {
                    isVarArgs = true
                } {
                    branch(useInputs {
                        inputs = inputs#cons(o)
                    } {
                        outputs = outputs#cons(o)
                    })
                })
            })

            i = i + 1
        })


        branch(isVarArgs {
            obj : Object = inputs#nth(inputs#length() - 1)

            varargs = varargs#cons(obj)
            inputs = checkcast(RT.pop(inputs), Vector)

            node(
                symbol("function")
                silo.lang.Node(symbol("name"), id#getLabel())
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                silo.lang.Node.fromVector(varargs)
                body
            )
        } {
            node(
                symbol("function")
                silo.lang.Node(symbol("name"), id#getLabel())
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                body
            )
        })
    }
)

function(
    name(fn)
    macro
    varargs(args)
    outputs(silo.lang.Node)
    {
        inputs : Vector = vectorNew(symbol("inputs"))
        outputs : Vector = vectorNew(symbol("outputs"))
        varargs : Vector = vectorNew(symbol("varargs"))

        useInputs : boolean = true
        isVarArgs : boolean = false

        n : silo.lang.Node = null
        s : silo.lang.Symbol = null

        isArrow : boolean = false
        isDots : boolean = false

        i : int = 0
        while(i < (args#length() - 1) {
            o : Object = args#nth(i)

            branch(instanceof(o, silo.lang.Node) {
                n = checkcast(o, silo.lang.Node)
                isArrow = invokevirtual(invokevirtual(n getLabel()) equals(symbol("=>")))
            })

            branch(instanceof(o, silo.lang.Symbol) {
                s = checkcast(o, silo.lang.Symbol)
                isDots = s#equals(symbol("..."))
                isArrow = s#equals(symbol("=>"))
            })

            branch(isArrow {
                useInputs = false

                branch(instanceof(o, silo.lang.Node) {
                    n = checkcast(o, silo.lang.Node)

                    branch(instanceof(n#getFirstChild(), silo.lang.Symbol) {
                        s = checkcast(n#getFirstChild(), silo.lang.Symbol)
                        branch(s#equals(symbol("...")) {
                            isVarArgs = true
                        } {
                            inputs = inputs#cons(n#getFirstChild())
                        })
                    } {
                        branch(n#getFirstChild() {
                            inputs = inputs#cons(n#getFirstChild())
                        })
                    })

                    outputs = outputs#cons(n#getSecondChild())
                })
            } {
                branch(isDots {
                    isVarArgs = true
                } {
                    branch(useInputs {
                        inputs = inputs#cons(o)
                    } {
                        outputs = outputs#cons(o)
                    })
                })
            })

            i = i + 1
        })

        branch(isVarArgs {
            obj : Object = inputs#nth(inputs#length() - 1)

            varargs = varargs#cons(obj)
            inputs = checkcast(RT.pop(inputs), Vector)

            node(
                symbol("function")
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                silo.lang.Node.fromVector(varargs)
                node(
                    symbol("do")
                    args#nth(args#length() - 1)
                )
            )
        } {
            node(
                symbol("function")
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                node(
                    symbol("do")
                    args#nth(args#length() - 1)
                )
            )
        })
    }
)


function(
    name(print)
    inputs(value)
    outputs(Object)
    {
        System.out#print(value)
        return(value)
    }
)

function(
    name(println)
    inputs(value)
    outputs(Object)
    {
        System.out#println(value)
        return(value)
    }
)

function(
    name(time)
    macro
    inputs(o)
    outputs(silo.lang.Node)
    {
        // TODO: Change this to System.nanoTime()

        timerSymbol : silo.lang.Symbol = uniquesymbol()

        start : silo.lang.Node = node(symbol("=")
            node(symbol(":")
                timerSymbol
                symbol("long")
            )
            node(node(
                symbol(".")
                node(
                    symbol(".")
                    node(
                        symbol(".")
                        symbol("java")
                        symbol("lang")
                    )
                    symbol("System")
                )
                symbol("currentTimeMillis")
            ))
        )

        finish : silo.lang.Node = node(symbol("-")
            node(node(
                symbol(".")
                node(
                    symbol(".")
                    node(
                        symbol(".")
                        symbol("java")
                        symbol("lang")
                    )
                    symbol("System")
                )
                symbol("currentTimeMillis")
            ))
            timerSymbol
        )

        node(
            symbol("do")
            start
            o
            finish
        )
    }
)


function(
    name(ignore)
    macro
    varargs(args)
    outputs(Object)
    {
        code : Vector = vector.create(Symbol("try"), vector.last(args))

        i : int = 0
        while(i < (vector.length(args) - 1) {
            catchVariable : Node = Node.fromVector(vector.create(Symbol(":"), uniquesymbol(), vector.get(args, i)))
            catchBlock : Node = Node.fromVector(vector.create(Symbol("catch"), catchVariable))

            code = code | vector.push(catchBlock)
            code = code | vector.push(Node.fromVector(vector.create(null)))

            i = i + 1
        })

        Node.fromVector(
            code
        )
    }
)

function(
    name(parse)
    inputs(str : String)
    outputs(Object)
    {
        silo.lang.compiler.Parser.parse(str)
    }
)

function(
    name(macroexpand)
    inputs(form : Object)
    outputs(Object)
    {
        rt : silo.lang.Runtime = silo.lang.Runtime()
        silo.lang.compiler.Compiler.expandCode(silo.lang.CompilationContext(rt), form);
    }
)

function(
    name(macroexpand1)
    inputs(form : Object)
    outputs(Object)
    {
        throw("macroexpand1 is unimplemented currently.")
    }
)