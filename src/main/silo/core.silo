
package(silo.core)

function(
    name(while)
    macro
    inputs(condition, body)
    outputs(silo.lang.Node)
    {
        b : Vector = Vector()
        b#add(condition)
        b#add(body)
        b#add(silo.lang.Node(silo.lang.Symbol("break")))

        l : Vector = Vector()
        l#add(silo.lang.Node(silo.lang.Symbol("branch"), b))

        silo.lang.Node(silo.lang.Symbol("loop"), l)
    }
)

function(
    name(if)
    macro
    varargs(args)
    outputs(silo.lang.Node)
    {
        vec : IPersistentVector = vector()

        i : int = 0
        while(i < args#length() {
            o : Object = args#nth(i)

            branch(i % 2 == 0 {
                branch(i == 0 {
                    vec = vec#cons(o)
                } {
                    branch(instanceof(silo.lang.Node, o) {
                        n : silo.lang.Node = null
                        n = checkcast(silo.lang.Node, o)

                        vec = vec#cons(silo.lang.Node(
                            silo.lang.Symbol("do")
                            n#getChildren()
                        ))
                    } {
                        vec = vec#cons(Boolean.TRUE)
                    })
                })
            } {
                vec = vec#cons(o)
            })

            i = i + 1
        })

        expression : silo.lang.Node = null

        i : int = vec#length() - 1
        while(i >= 0 {
            condition : Object = vec#nth(i - 1)
            body : Object = vec#nth(i)

            expression = silo.lang.Node(
                silo.lang.Symbol("branch")
                condition
                body
                expression
            )

            i = i - 2;
        })

        return(expression)
    }
)

function(
    name(symbol)
    inputs(s : String)
    outputs(silo.lang.Symbol)
    {
        silo.lang.Symbol(s);
    }
)

function(
    name(vector)
    varargs(args)
    outputs(IPersistentVector)
    {
        args
    }
)

function(
    name(node)
    varargs(args)
    outputs(silo.lang.Node)
    {
        silo.lang.Node.fromVector(args)
    }
)

function(
    name(func)
    macro
    inputs(id : silo.lang.Node, body : silo.lang.Node)
    outputs(silo.lang.Node)
    {
        children : Vector = id#getChildren();

        inputs : IPersistentVector = vector(symbol("inputs"))
        outputs : IPersistentVector = vector(symbol("outputs"))
        varargs : IPersistentVector = vector(symbol("varargs"))

        useInputs : boolean = true
        isVarArgs : boolean = false

        n : silo.lang.Node = null
        s : silo.lang.Symbol = null

        i : int = 0
        while(i < children#size() {
            o : Object = children#get(i)

            branch(instanceof(silo.lang.Node, o) {
                n = checkcast(silo.lang.Node, o)
                isArrow : boolean = invokevirtual(invokevirtual(n getLabel()) equals(symbol("=>")))
            })

            branch(instanceof(silo.lang.Symbol, o) {
                s = checkcast(silo.lang.Symbol, o)
                isDots : boolean = s#equals(symbol("..."))
            })

            branch(isArrow {
                n = checkcast(silo.lang.Node, o)

                branch(instanceof(silo.lang.Symbol, n#getFirstChild()) {
                    s = checkcast(silo.lang.Symbol, n#getFirstChild())
                    branch(s#equals(symbol("...")) {
                        isVarArgs = true
                    } {
                        inputs = inputs#cons(n#getFirstChild())
                    })
                } {
                    inputs = inputs#cons(n#getFirstChild())
                })

                outputs = outputs#cons(n#getSecondChild())
            } {
                branch(isDots {
                    isVarArgs = true
                } {
                    branch(useInputs {
                        inputs = inputs#cons(o)
                    } {
                        outputs = outputs#cons(o)
                    })
                })
            })

            i = i + 1
        })


        branch(isVarArgs {
            obj : Object = inputs#nth(inputs#length() - 1)

            varargs = varargs#cons(obj)
            inputs = checkcast(IPersistentVector, RT.pop(inputs))

            node(
                symbol("function")
                silo.lang.Node(symbol("name"), id#getLabel())
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                silo.lang.Node.fromVector(varargs)
                body
            )
        } {
            node(
                symbol("function")
                silo.lang.Node(symbol("name"), id#getLabel())
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                body
            )
        })
    }
)

function(
    name(fn)
    macro
    varargs(args)
    outputs(silo.lang.Node)
    {
        inputs : IPersistentVector = vector(symbol("inputs"))
        outputs : IPersistentVector = vector(symbol("outputs"))
        varargs : IPersistentVector = vector(symbol("varargs"))

        useInputs : boolean = true
        isVarArgs : boolean = false

        n : silo.lang.Node = null
        s : silo.lang.Symbol = null


        i : int = 0
        while(i < (args#length() - 1) {
            o : Object = args#nth(i)

            branch(instanceof(silo.lang.Node, o) {
                n = checkcast(silo.lang.Node, o)
                isArrow : boolean = invokevirtual(invokevirtual(n getLabel()) equals(symbol("=>")))
            })

            branch(instanceof(silo.lang.Symbol, o) {
                s = checkcast(silo.lang.Symbol, o)
                isDots : boolean = s#equals(symbol("..."))
            })

            branch(isArrow {
                n = checkcast(silo.lang.Node, o)

                branch(instanceof(silo.lang.Symbol, n#getFirstChild()) {
                    s = checkcast(silo.lang.Symbol, n#getFirstChild())
                    branch(s#equals(symbol("...")) {
                        isVarArgs = true
                    } {
                        inputs = inputs#cons(n#getFirstChild())
                    })
                } {
                    inputs = inputs#cons(n#getFirstChild())
                })

                outputs = outputs#cons(n#getSecondChild())
            } {
                branch(isDots {
                    isVarArgs = true
                } {
                    branch(useInputs {
                        inputs = inputs#cons(o)
                    } {
                        outputs = outputs#cons(o)
                    })
                })
            })

            i = i + 1
        })

        branch(isVarArgs {
            obj : Object = inputs#nth(inputs#length() - 1)

            varargs = varargs#cons(obj)
            inputs = checkcast(IPersistentVector, RT.pop(inputs))

            node(
                symbol("function")
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                silo.lang.Node.fromVector(varargs)
                node(
                    symbol("do")
                    args#nth(args#length() - 1)
                )
            )
        } {
            node(
                symbol("function")
                silo.lang.Node.fromVector(inputs)
                silo.lang.Node.fromVector(outputs)
                node(
                    symbol("do")
                    args#nth(args#length() - 1)
                )
            )
        })
    }
)


function(
    name(print)
    inputs(value)
    outputs(Object)
    {
        System.out#println(value)
        return(value)
    }
)

