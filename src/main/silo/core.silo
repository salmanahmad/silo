
function(
    name(while)
    macro
    inputs(condition, body)
    outputs(silo.lang.Node)
    {
        b : Vector = Vector()
        b#add(condition)
        b#add(body)
        b#add(silo.lang.Node(silo.lang.Symbol("break")))

        l : Vector = Vector()
        l#add(silo.lang.Node(silo.lang.Symbol("branch"), b))

        silo.lang.Node(silo.lang.Symbol("loop"), l)
    }
)

function(
    name(symbol)
    inputs(s : String)
    outputs(silo.lang.Symbol)
    {
        silo.lang.Symbol(s);
    }
)

function(
    name(vector)
    varargs(args)
    outputs(com.github.krukow.clj_lang.IPersistentVector)
    {
        args
    }
)

function(
    name(node)
    varargs(args)
    outputs(silo.lang.Node)
    {
        silo.lang.Node.fromVector(args)
    }
)

function(
    name(fn)
    macro
    varargs(args)
    outputs(silo.lang.Node)
    {
        node(
            symbol("function")
            node(
                symbol("do")
                args#nth(args#length() - 1)
            )
        )
    }
)


function(
    name(print)
    inputs(value)
    outputs(Object)
    {
        System.out#println(value)
        return(value)
    }
)

