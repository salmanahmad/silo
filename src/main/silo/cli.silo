
package(silo.cli)
import(silo.core)
import(silo.io)

alias(Runtime, silo.lang.Runtime)
alias(CompilationContext, silo.lang.CompilationContext)
alias(FileUtils, org.apache.commons.io.FileUtils)
alias(FilenameUtils, org.apache.commons.io.FilenameUtils)
alias(SystemUtils, org.apache.commons.lang3.SystemUtils)
alias(StringUtils, org.apache.commons.lang3.StringUtils)
alias(FileUtils, org.apache.commons.io.FileUtils)
alias(ManagementFactory, java.lang.management.ManagementFactory)

alias(Actor, silo.lang.Actor)
alias(Node, silo.lang.Node)
alias(Symbol, silo.lang.Symbol)
alias(Compiler, silo.lang.compiler.Compiler)
alias(Parser, silo.lang.compiler.Parser)

alias(ConsoleReader, jline.console.ConsoleReader)
alias(Completer, jline.console.completer.Completer)
alias(FileNameCompleter, jline.console.completer.FileNameCompleter)
alias(StringsCompleter, jline.console.completer.StringsCompleter)

alias(JavaVector, java.util.Vector)

func(main(args : Vector) {
    if(args#length() == 0 {
        shell()
        return()
    })

    first : Object = args#nth(0, null)

    if(first#equals("run") {
        run(vector.removeFirst(args))
    } else(first#equals("shell")) {
        shell()
    } else(first#equals("service")) {
        args = vector.removeFirst(args)
        first = args#nth(0, null)
        args = vector.removeFirst(args)

        if(!SystemUtils.IS_OS_UNIX {
            println("Sorry, but the \"silo service\" command is currently only available on POSIX operating systems. Windows support is coming soon!")
            return
        })

        if(first == "start" {
            serviceStart(args)
        } else(first == "stop") {
            serviceStop(args)
        } else(first == "monitor") {
            serviceMonitor(args)
        } else {
            println(help("service"))
        })
    } else(first#equals("compile")) {
        compile(vector.removeFirst(args))
    } else(first#equals("help")) {
        println(help(args#nth(1, null)))
    } else(first#equals("version")) {
        println(version())
    } else(first#equals("copyright")) {
        println(copyright())
    } else {
        run(args)
    })
})

func(run(args : Vector) {
    runtime : Runtime = Runtime()
    main : java.lang.Class = null
    arg : Object = vector.get(args, 0, null)

    if(arg {
        name : String = arg#toString()
        main = runtime.loader#resolveType(name)

        if(!main {
            source : String = FileUtils.readFileToString(File(name))
            code : silo.lang.Node = silo.lang.compiler.Parser.parse(name, source)

            classes : java.util.Vector = runtime#compile(code)
            main = checkcast(classes#get(classes#size() - 1), java.lang.Class)
        })
    } else {
        return
    })

    f : Function = checkcast(main#newInstance(), Function)

    a : silo.lang.Actor = runtime#spawn(f)
    ignore(RuntimeException {
        a#await()
    })

    runtime#shutdown()
})

func(serviceStart(args : Vector) {
    javaHome : String = System.getProperty("java.home")
    javaFlags : String = ManagementFactory.getRuntimeMXBean()#getInputArguments() | StringUtils.join(" ")
    javaPath : String = System.getProperty("java.class.path")

    serviceName : String = args#nth(0, null) | checkcast(String)
    name : String = serviceName
    serviceName = serviceName + ".service"
    args = vector.removeFirst(args)

    argsString : String = ""
    i : int = 0
    while(i < args | vector.length() {
        if(i == 0 {
            argsString = "" + vector.get(args, i)
        } else {
            argsString = argsString + " " + vector.get(args, i)
        })

        i = i + 1
    })

    java.nio.file.Paths.get(serviceName) | fs.createDirectories()

    if(java.nio.file.Paths.get(serviceName, "service.pid") | fs.exists() {
        println("Service is already running.")
    } else {
        command : array(String) = arraynew(String, 3)
        command(0) = "sh"
        command(1) = "-c"
        command(2) = String.format("nohup %s/bin/java %s -classpath %s silo.lang.Main %s > %s/log.txt 2>&1 < /dev/null & echo $! > %s/service.pid", javaHome, javaFlags, javaPath, argsString, serviceName, serviceName)

        java.lang.Runtime.getRuntime()#exec(command)
        println("Starting service: " + name)
    })

})

func(serviceStop(args : Vector) {
    serviceName : String = args#nth(0, null) | checkcast(String)
    name = serviceName
    if(!serviceName#endsWith(".service") && !serviceName#endsWith(".service/") {
        serviceName = serviceName + ".service"
    })

    pid : String = file.readAll(file.path(serviceName, "service.pid")#toString())
    pid = pid#trim()

    java.lang.Runtime.getRuntime()#exec("kill -9 " + pid)
    FileUtils.deleteDirectory(File(serviceName))

    println("Stopping service: " + name)
})

func(serviceMonitor(args : Vector) {
    serviceName : String = args#nth(0, null) | checkcast(String)
    name = serviceName
    if(!serviceName#endsWith(".service") && !serviceName#endsWith(".service/") {
        serviceName = serviceName + ".service"
    })

    command : array(String) = arraynew(String, 3)
    command(0) = "tail"
    command(1) = "-f"
    command(2) = file.path(serviceName, "log.txt")#toString()

    p : Process = java.lang.Runtime.getRuntime()#exec(command)

    line : String = "";
    input : BufferedReader = BufferedReader(InputStreamReader(p#getInputStream()));
    while(((line = input#readLine()) != null) {
        System.out#println(line)
    })
    input#close();
})

func(processLocals(code : Object, locals : Map, processFunctions : boolean => Vector) {
    if(instanceof(code Symbol) {
        if(map.get(locals, code) {
            t : Object = map.get(locals, code)

            functionName : Object = Parser.parse("silo.cli.getLocal")#getFirstChild()
            code = Node.fromVector(
                vector.create(
                    Symbol("checkcast")
                    Node.fromVector(
                        vector.create(
                            functionName
                            code#toString()
                        )
                    )
                    Parser.parse(t#toString())#getFirstChild()
                )
            )
        })

        return(vector.create(code, locals))
    } else(instanceof(code Node)) {
        v : Vector = null

        node : Node = checkcast(code, Node)
        label : Object = node#getLabel()

        if(label == Symbol("function") && !processFunctions {
            // Do not recurse any more
            return(vector.create(code, locals))
        })

        if(label == Symbol("=") {
            // Assigning a local variable
            first : Object = node#getFirstChild()
            second : Object = node#getSecondChild()

            functionName : Object = Parser.parse("silo.cli.setLocal")#getFirstChild()

            v = processLocals(second, locals, false)
            second = vector.get(v, 0)
            locals = checkcast(vector.get(v, 1), Map)

            if(instanceof(first Node) && (checkcast(first Node)#getLabel() == Symbol(":")) {
                n : Node = checkcast(first, Node)

                locals = map.set(locals, n#getFirstChild(), n#getSecondChild()#toString())

                code = Node.fromVector(
                    vector.create(
                        functionName
                        n#getFirstChild()#toString()
                        second
                    )
                )

                return(vector.create(code locals))
            } else(instanceof(first, Symbol)) {
                locals = map.set(locals, first, Parser.parse("java.lang.Object")#getFirstChild())
                code = Node.fromVector(
                    vector.create(
                        functionName
                        first#toString()
                        second
                    )
                )

                return(vector.create(code locals))
            } else {
                v = processLocals(first, locals, false)
                first = vector.get(v, 0)
                locals = checkcast(vector.get(v, 1), Map)

                return(vector.create(Node.fromVector(
                    vector.create(
                        Symbol("=")
                        first
                        second
                    )
                ) locals))
            })
        })

        v = processLocals(label, locals, false);
        label = vector.get(v, 0)
        locals = checkcast(vector.get(v, 1), Map)

        nodeContent : Vector = vector.create()
        nodeContent = vector.push(nodeContent, label)

        i : int = 0
        children : JavaVector = node#getChildren()
        while(i < children#size() {
            child : Object = children#get(i)
            v = processLocals(child, locals, false)

            child = vector.get(v, 0)
            locals = checkcast(vector.get(v, 1), Map)
            nodeContent = vector.push(nodeContent, child)

            i = i + 1
        })

        return(vector.create(Node.fromVector(nodeContent), locals))
    } else {
        return(vector.create(code, locals))
    })

    null
})

func(shell {
    runtime : Runtime = Runtime()

    // TODO: Explore more features of jLine. Examples are here:
    // https://github.com/jline/jline2/blob/master/src/test/java/jline/example/Example.java
    // In particular, it would be nice to support color, multi-line inputs, and API completion
    // Multi-line edits are actually somewhat simple. I should just count the number of unbalanced
    // parens and braces and then go into multiline mode. I should end when the parens are balanced.
    console : ConsoleReader = ConsoleReader()
    console#setExpandEvents(false)
    console#setPrompt("$ ")

    locals : Map = map.create()

    println(version() + "\n")

    line : String = null
    while(line = console#readLine() {
        if(line == "quit" || line == "exit" {
            break
        })

        try({
            code : Object = Parser.parse(line)
            code = runtime#expandCode(code)

            v : Vector = processLocals(code, locals, true)
            code = vector.get(v, 0)
            locals = checkcast(vector.get(v, 1), Map)

            classes : JavaVector = runtime#compileExpandedCode(code)

            f : Function = checkcast(checkcast(classes#get(classes#size() - 1), Class)#newInstance() Function)
            actor : Actor = runtime#spawn(f)

            try({
                output : Object =  null
                output = actor#await()
            } catch(e : Exception) {
                // Ignore this...
            })

            println("> " + output + "\n")
        } catch(e : Exception) {
            e#printStackTrace()
        })
    })
})

func(compile(files : Vector) {
    if(files == null return())

    useJar : boolean = true
    output : String = null
    file : String = null

    for(i : int = 0; i < vector.length(files); i = i + 1 {
        if(vector.get(files, i) == "--jar" {
            useJar = true
        } else(vector.get(files, i) == "--classes") {
            useJar = false
        } else(vector.get(files, i) == "--output") {
            i = i + 1
            if(output == null {
                output = vector.get(files, i, null) | checkcast(String)
            })
        } else {
            if(file == null {
                file = vector.get(files, i, null) | checkcast(String)
            })
        })
    })

    if(file == null return())

    if(output == null {
        output = "lib" + File.separator + FilenameUtils.removeExtension(file)
    })

    source : String = FileUtils.readFileToString(File(file))
    code : silo.lang.Node = silo.lang.compiler.Parser.parse(file, source)

    runtime : Runtime = Runtime();
    context : CompilationContext = runtime#contextByCompiling(source)

    if(useJar {
        silo.lang.Compile.writeBytecodeToJarFile(context.bytecode, output + ".jar")
    } else {
        silo.lang.Compile.writeBytecodeToDirectory(context.bytecode, output)
    })
})

func(version {
    String.format("Silo %s (Codename: %s) - %s, %s.", silo.lang.Version.string, silo.lang.Version.codename, System.getProperty("java.vm.name"), System.getProperty("java.version"))
})

func(copyright() {
    String.format("%s - %s", version(), "Copyright (c) 2014 by Salman Ahmad")
})

func(help(command) {
    if(!command, command = "")

    if(command#equals("run") {
"
Usage: silo [run] [mode] <program-file> [arguments]

  Run a Silo program. Arguments will be provided as command line arguments.
  By default the mode will be chosen heuristically based on the name of the
  <program-file>. Modes can be explicitly specified using the flags described
  below.


Modes include:

  [-f | --file]        # Compile the <program-file> as a Silo source file and
                       # then automatically run it. This mode is chosen by
                       # default if the <program-file> ends with \".silo\".

  [-j | --jar]         # Run the <program-file> as a jar file with an embedded
                       # manifest. The jar file is added to the classpath and
                       # the manifest is used to determine the main function.
                       # This mode is chosen by default if the <program-file>
                       # ends with \".jar\".

  [-m | --main]        # Run <program-file> as the name of the main function.
                       # This mode is chosen by default if the <program-file>
                       # specifies the fully qualified name of a function that
                       # exists in the classpath.
"
    } else(command#equals("service")) {
"
Usage: silo service <command> <name> [run-arguments]

  Run a Silo program as a background service. This service will not not block
  the current terminal and will continue to run even after the terminal has
  been closed. This is perfect for launching a long-running app, for example,
  over an SSH connection.

  The sub commands to \"service\" include:

    start              # Start a service with the given name. This command
                       # will create a directory called \"<name>.service\"
                       # that contains the service's log and pid. This
                       # command also accepts \"run-arguments\" which
                       # will be passed through to \"silo run\".

    stop               # Stops the service from running and removes the
                       # \"<name>.service\" directory.

    monitor            # Connects to a running service and displays its
                       # running log in real time. The log is contained
                       # in \"<name>.service\".
"
    } else(command#equals("compile")) {
"
Usage: silo compile [options] <files>

  Compile a Silo source files and output JVM bytecode. If a directory is 
  specified (including '.') all of the Silo source files in that directory.


Options include:

  [--jar | --classes]   # Output a single .jar file or individual java .class
                        # files. The jar file can be directly executed using
                        # the 'silo run' command. The default is --jar.

  --output NAME         # The name of the .jar file or the location to place
                        # the .class files. If .jar is used and a directory is
                        # specified, the name of the jar file will match the
                        # name of the directory. This option will default to
                        # the name of the first file or directory listed.
"
    } else(command#equals("shell")) {

"
Usage: silo [shell]

  Launch an interactive REPL (read-evaluate-print-loop) that allows you to type
  and execute Silo commands directly into your terminal.
"

    } else(command#equals("version")) {
"
Usage: silo version

  Show Silo version.
"
    } else(command#equals("copyright")) {
"
Usage: silo copyright

  Show Silo copyright.
"
    } else {
"
Usage: silo [java-flags] <command> [command-specific-arguments]

List of commands, type \"silo help <command>\" for more details:

  run                        # Run a Silo program
  service                    # Run a Silo program as a background service
  shell                      # Launch the interactive Silo shell
  compile                    # Compile Silo source files and output JVM bytecode
  help                       # Show the help page for a command
  version                    # Show the Silo version
  copyright                  # Show the Silo copyright


Java and JVM include:

  --java <path>              # Specify the path to the \"java\" executable.
                             # This is optional. Silo will, by default
                             # search the PATH and JAVA_HOME env variables.

  --classpath <path>         # Specify additions to the CLASSPATH
  -cp <path>                 # Shorthand for --classpath

  --java.<flag>              # Specify any arbitrary Java flag.
  -j.<flag>                  # Shorthand for --java.

"
    })
})