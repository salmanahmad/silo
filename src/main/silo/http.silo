
package(silo.net.http.connection {
    alias(DefaultFullHttpResponse, io.netty.handler.codec.http.DefaultFullHttpResponse)
    alias(DefaultHttpResponse, io.netty.handler.codec.http.DefaultHttpResponse)
    alias(DefaultHttpContent, io.netty.handler.codec.http.DefaultHttpContent)
    alias(LastHttpContent, io.netty.handler.codec.http.LastHttpContent)

    alias(HttpVersion, io.netty.handler.codec.http.HttpVersion)
    alias(HttpResponseStatus, io.netty.handler.codec.http.HttpResponseStatus)

    alias(ByteBuf, io.netty.buffer.ByteBuf)
    alias(CharsetUtil, io.netty.util.CharsetUtil)
    alias(Unpooled, io.netty.buffer.Unpooled)

    func(close(c : Connection) {
        throw("Unimplemented Close")
    })

    func(read(c : Connection) {
        throw("Unimplemented Read")
    })

    func(readAll(c : Connection) {
        throw("Unimplemented ReadAll")
    })

    func(writeHead(c : Connection, status : int, headers : PersistentMap) {
        if(c.doneWriting {
            return(null)
        })

        // TODO: Support Headers

        response : DefaultHttpResponse = DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(status))

        c.context#write(response)

        null
    })

    func(write(c : Connection, message : Object) {
        if(c.doneWriting {
            return(null)
        })

        content = null

        if(instanceof(ByteBuf, message) {
            content = DefaultHttpContent(checkcast(ByteBuf, message))
        } else {
            content = DefaultHttpContent(Unpooled.copiedBuffer(message#toString(), CharsetUtil.UTF_8))
        })

        c.context#write(content)

        null
    })

    func(writeEnd(c : Connection, trailers : PersistentMap) {
        if(c.doneWriting {
            return(null)
        } else {
            c.doneWriting = true
        })

        if(trailers == null {
            c.context#write(LastHttpContent.EMPTY_LAST_CONTENT)
        } else {
            throw("Trailers Unimplemented")
        })

        null
    })

    func(writeAll(c : Connection, status : int, headers : PersistentMap, message : Object) {
        if(c.doneWriting {
            return(null)
        } else {
            c.doneWriting = true
        })

        if((!instanceof(ByteBuf, message)) {
            message = Unpooled.copiedBuffer(message#toString(), CharsetUtil.UTF_8)
        })

        response : DefaultFullHttpResponse = DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(status), checkcast(ByteBuf, message))
        c.context#write(response)

        null
    })
})
