
alias(DefaultFullHttpRequest, io.netty.handler.codec.http.DefaultFullHttpRequest)
alias(DefaultFullHttpResponse, io.netty.handler.codec.http.DefaultFullHttpResponse)
alias(DefaultHttpRequest, io.netty.handler.codec.http.DefaultHttpRequest)
alias(DefaultHttpResponse, io.netty.handler.codec.http.DefaultHttpResponse)
alias(DefaultHttpContent, io.netty.handler.codec.http.DefaultHttpContent)
alias(LastHttpContent, io.netty.handler.codec.http.LastHttpContent)

alias(HttpMethod, io.netty.handler.codec.http.HttpMethod)
alias(HttpVersion, io.netty.handler.codec.http.HttpVersion)
alias(HttpResponseStatus, io.netty.handler.codec.http.HttpResponseStatus)

alias(ByteBuf, io.netty.buffer.ByteBuf)
alias(CharsetUtil, io.netty.util.CharsetUtil)
alias(Unpooled, io.netty.buffer.Unpooled)

alias(Connection, silo.net.http.connection.Connection)
alias(Message, silo.core.actor.Message)

// TODO: DO I NEED TO RELEASE BYTEBUFS

// TODO: Implement and handle socket timeouts and DNS errors. If I try to connect to a server
// that is not running the client will just hang.

package(silo.net.http.client {

    // TODO: Implement "get()" and "post()" and "postFile()" helper functions.
    // These functions would likely use DefaultFullHttpRequest (note the 'Full')

    func(request(options : Map => Connection) {
        host : String = checkcast(map.get(options, "host", "localhost"), String)
        port : int = checkcast(map.get(options, "port", Integer(80)), Integer)#intValue()
        headers : Map = checkcast(map.get(options, "headers", map.create()), Map)

        c : Connection = connect(host, port)

        path : String = checkcast(map.get(options, "path", "/"), String)
        method : String = checkcast(map.get(options, "method", "GET"), String)

        request : DefaultHttpRequest = DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.valueOf(method), path);
        request#headers()#set("Host", host);
        request#headers()#set("Connection", "close");
        request#headers()#set("Accept-Encoding", "gzip");

        keys : Vector = map.keys(headers)

        i : int = 0
        while(i < vector.length(keys) {
            key : Object = vector.get(keys, i)
            value : Object = map.get(headers, key)
            request#headers()#set(key#toString(), value);
            i = i + 1
        })

        c.context#write(request)

        return(c)
    })
})

package(silo.net.http.connection {
    func(handle(f : Function, r : Request, c : Connection) {
        // TODO: I feel that if an exception took place, I should close the connection.

        try({
            f(r, c)
        } finally {
            if(!checkcast(map.get(r.headers, "Connection", "Close"), String)#equalsIgnoreCase("Keep-Alive") {
                close(c)
            })
        })
    })

    func(close(c : Connection) {
        if(c.closed {
            return(null)
        })

        c.doneReading = true
        c.doneWriting = true
        c.closed = true

        c.context#close()
    })

    func(readHead(c : Connection => Response) {
        if(c.type == Connection.SERVER {
            // A client connection cannot be given another header
            return(null)
        })

        while(true {
            o : Object = actor.peek()

            if(instanceof(o, Response) {
                message : Response = checkcast(o, Response)
                if(message.connectionId == c.connectionId {
                    actor.read()
                    return(message);
                })
            })

            actor.skip()
        })

        return(null)
    })

    func(read(c : Connection => HttpContentMessage) {
        if(c.doneReading {
            return(null)
        })

        while(true {
            o : Object = actor.peek()

            if(instanceof(o, HttpContentMessage) {
                message : HttpContentMessage = checkcast(o, HttpContentMessage)
                if(message.connectionId == c.connectionId {
                    actor.read()

                    if(message.lastHttpMessage {
                        c.doneReading = true
                    })

                    return(message);
                })
            })

            actor.skip()
        })

        return(null);
    })

    func(readAll(c : Connection => HttpContentMessage) {
        buffer : ByteBuf = null

        while(true {
            message : HttpContentMessage = read(c)

            if(buffer == null {
                buffer = message.content
            } else {
                buffer = Unpooled.wrappedBuffer(buffer, message.content)
            })

            if(message.lastHttpMessage {
                message.content = buffer
                return(message)
            })
        })

        null
    })

    func(writeContinue(c : Connection) {
        response : DefaultFullHttpResponse = DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE)
        c.context#writeAndFlush(response)

        null
    })

    func(writeHead(c : Connection, status : int, headers : Map) {
        if(c.type == Connection.CLIENT {
            // A client connection cannot be given another header
            return(null)
        })

        if(c.doneWriting {
            return(null)
        })

        response : DefaultHttpResponse = DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(status))

        if(headers {
            keys : Vector = map.keys(headers)
            for(i : int = 0; i < vector.length(keys); i = i + 1 {
                key : String = vector.get(keys, i)#toString()
                value : Object = map.get(headers, key)

                response#headers()#add(key, value)
            })
        })

        c.context#write(response)

        null
    })

    func(write(c : Connection, message : Object) {
        if(c.doneWriting {
            return(null)
        })

        content = null

        if(instanceof(message, ByteBuf) {
            content = DefaultHttpContent(checkcast(message, ByteBuf))
        } else {
            content = DefaultHttpContent(Unpooled.copiedBuffer(message#toString(), CharsetUtil.UTF_8))
        })

        c.context#write(content)

        null
    })

    func(writeEnd(c : Connection, trailers : Map) {
        if(c.doneWriting {
            return(null)
        } else {
            c.doneWriting = true
        })

        if(trailers == null {
            c.context#writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)
        } else {
            throw("Trailers Unimplemented")
        })

        null
    })

    func(writeAll(c : Connection, status : int, headers : Map, message : Object) {
        // TODO: Ignore headers for client connections

        if(c.doneWriting {
            return(null)
        } else {
            c.doneWriting = true
        })

        if((!instanceof(message, ByteBuf)) {
            message = Unpooled.copiedBuffer(message#toString(), CharsetUtil.UTF_8)
        })

        data : ByteBuf = checkcast(message, ByteBuf)
        response : DefaultFullHttpResponse = DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(status), data)
        invokevirtual(response#headers(), set(checkcast("Content-Length", CharSequence), Integer(data#readableBytes())))

        if(c.isKeepAlive {
            response#headers()#set("Connection", "Keep-Alive")
        } else {
            response#headers()#set("Connection", "Close")
        })

        c.context#writeAndFlush(response)

        null
    })
})
